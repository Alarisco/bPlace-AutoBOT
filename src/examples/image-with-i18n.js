/**
 * Ejemplo de integraci√≥n del sistema i18n en el m√≥dulo de imagen
 * Este archivo muestra c√≥mo a√±adir el selector de idioma al m√≥dulo existente
 */

import { runImage } from './image/index.js';
import { createLanguageSelector } from './core/language-selector.js';
import { t, getCurrentLanguage, setLanguage, AVAILABLE_LANGUAGES } from './locales/index.js';

/**
 * Versi√≥n mejorada del m√≥dulo de imagen con soporte completo de idiomas
 */
export async function runImageWithI18n() {
  // 1. Ejecutar el m√≥dulo de imagen normal
  await runImage();
  
  // 2. A√±adir selector de idioma
  const languageSelector = createLanguageSelector({
    position: 'top-left', // Posici√≥n diferente para no interferir con la UI existente
    showFlags: true,
    onLanguageChange: (newLanguage) => {
      // Mostrar notificaci√≥n de cambio
      console.log(`üåç Idioma cambiado a: ${newLanguage}`);
      
      // Aqu√≠ se podr√≠a a√±adir l√≥gica adicional como:
      // - Recargar la UI completa
      // - Actualizar textos din√°micos
      // - Guardar preferencias adicionales
      
      showLanguageChangeNotification(newLanguage);
    }
  });
  
  // 3. Montar el selector
  languageSelector.mount();
  
  // 4. A√±adir informaci√≥n sobre el idioma actual en la consola
  logLanguageInfo();
  
  return languageSelector;
}

/**
 * Muestra una notificaci√≥n temporal cuando cambia el idioma
 */
function showLanguageChangeNotification(language) {
  // Crear notificaci√≥n temporal
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: #2d3748;
    color: #eee;
    padding: 12px 20px;
    border-radius: 8px;
    z-index: 999999;
    font-family: system-ui, sans-serif;
    font-size: 14px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    border-left: 4px solid #10b981;
    animation: slideInRight 0.3s ease-out;
  `;
  
  // A√±adir estilos de animaci√≥n
  if (!document.querySelector('#i18n-notification-styles')) {
    const styles = document.createElement('style');
    styles.id = 'i18n-notification-styles';
    styles.textContent = `
      @keyframes slideInRight {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      @keyframes slideOutRight {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
      }
    `;
    document.head.appendChild(styles);
  }
  
  notification.textContent = t('common.languageChanged', { language });
  document.body.appendChild(notification);
  
  // Remover despu√©s de 3 segundos
  setTimeout(() => {
    notification.style.animation = 'slideOutRight 0.3s ease-in';
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 3000);
}

/**
 * Informaci√≥n de debug sobre el sistema de idiomas
 */
function logLanguageInfo() {
  const currentLang = getCurrentLanguage();
  console.group('üåç Sistema de Internacionalizaci√≥n');
  console.log(`üìç Idioma actual: ${currentLang}`);
  console.log(`üíæ LocalStorage deshabilitado en este bot`);
  console.log(`üåê Idioma del navegador: ${window.navigator.language}`);
  console.log(`‚úÖ Sistema i18n inicializado correctamente`);
  console.groupEnd();
}

/**
 * Funci√≥n de utilidad para cambiar el idioma program√°ticamente
 * √ötil para testing o controles adicionales
 */
export function changeLanguage(langCode) {
  if (AVAILABLE_LANGUAGES[langCode]) {
    setLanguage(langCode);
    console.log(`‚úÖ Idioma cambiado a: ${langCode}`);
    return true;
  } else {
    console.error(`‚ùå Idioma '${langCode}' no disponible`);
    console.log('Idiomas disponibles:', Object.keys(AVAILABLE_LANGUAGES));
    return false;
  }
}

/**
 * Funci√≥n para a√±adir atributos de internacionalizaci√≥n a elementos existentes
 * √ötil para hacer que elementos antiguos sean traducibles
 */
export function makeElementTranslatable(element, textKey, params = {}) {
  // A√±adir atributo para identificaci√≥n
  element.setAttribute('data-text-key', textKey);
  if (Object.keys(params).length > 0) {
    element.setAttribute('data-text-params', JSON.stringify(params));
  }
  
  // Actualizar texto inicial
  updateElementText(element);
  
  // Escuchar cambios de idioma
  window.addEventListener('languageChanged', () => {
    updateElementText(element);
  });
}

function updateElementText(element) {
  const textKey = element.getAttribute('data-text-key');
  const paramsAttr = element.getAttribute('data-text-params');
  const params = paramsAttr ? JSON.parse(paramsAttr) : {};
  
  if (textKey) {
    element.textContent = t(textKey, params);
  }
}

// Exportar la funci√≥n principal para uso f√°cil
export default runImageWithI18n;
